/* tslint:disable */
/* eslint-disable */
/**
 * JSONPlaceholder
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Post,
} from '../models/index';
import {
    PostFromJSON,
    PostToJSON,
} from '../models/index';

export interface ListPostsRequest {
    userId?: number;
    title?: string;
}

export interface PostsPostRequest {
    post: Post;
}

export interface PostsPostIdDeleteRequest {
    postId: number;
}

export interface PostsPostIdGetRequest {
    postId: number;
}

export interface PostsPostIdPatchRequest {
    postId: number;
    post: Post;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get posts
     */
    async listPostsRaw(requestParameters: ListPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Post>>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostFromJSON));
    }

    /**
     * Get posts
     */
    async listPosts(requestParameters: ListPostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Post>> {
        const response = await this.listPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create post
     */
    async postsPostRaw(requestParameters: PostsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Post>> {
        if (requestParameters['post'] == null) {
            throw new runtime.RequiredError(
                'post',
                'Required parameter "post" was null or undefined when calling postsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/posts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostToJSON(requestParameters['post']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFromJSON(jsonValue));
    }

    /**
     * Create post
     */
    async postsPost(requestParameters: PostsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Post> {
        const response = await this.postsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete post
     */
    async postsPostIdDeleteRaw(requestParameters: PostsPostIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling postsPostIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts/{post-id}`.replace(`{${"post-id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete post
     */
    async postsPostIdDelete(requestParameters: PostsPostIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postsPostIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get post by ID
     */
    async postsPostIdGetRaw(requestParameters: PostsPostIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Post>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling postsPostIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/posts/{post-id}`.replace(`{${"post-id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFromJSON(jsonValue));
    }

    /**
     * Get post by ID
     */
    async postsPostIdGet(requestParameters: PostsPostIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Post> {
        const response = await this.postsPostIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update post
     */
    async postsPostIdPatchRaw(requestParameters: PostsPostIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Post>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling postsPostIdPatch().'
            );
        }

        if (requestParameters['post'] == null) {
            throw new runtime.RequiredError(
                'post',
                'Required parameter "post" was null or undefined when calling postsPostIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/posts/{post-id}`.replace(`{${"post-id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PostToJSON(requestParameters['post']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostFromJSON(jsonValue));
    }

    /**
     * Update post
     */
    async postsPostIdPatch(requestParameters: PostsPostIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Post> {
        const response = await this.postsPostIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
