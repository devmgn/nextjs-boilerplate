/* tslint:disable */
/* eslint-disable */
/**
 * PokéAPI
 * All the Pokémon data you\'ll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We\'ve covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.     
 *
 * The version of the OpenAPI document: 2.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SuperContestEffectFlavorText } from './SuperContestEffectFlavorText';
import {
    SuperContestEffectFlavorTextFromJSON,
    SuperContestEffectFlavorTextFromJSONTyped,
    SuperContestEffectFlavorTextToJSON,
    SuperContestEffectFlavorTextToJSONTyped,
} from './SuperContestEffectFlavorText';
import type { MoveSummary } from './MoveSummary';
import {
    MoveSummaryFromJSON,
    MoveSummaryFromJSONTyped,
    MoveSummaryToJSON,
    MoveSummaryToJSONTyped,
} from './MoveSummary';

/**
 * 
 * @export
 * @interface SuperContestEffectDetail
 */
export interface SuperContestEffectDetail {
    /**
     * 
     * @type {number}
     * @memberof SuperContestEffectDetail
     */
    readonly id: number;
    /**
     * 
     * @type {number}
     * @memberof SuperContestEffectDetail
     */
    appeal: number;
    /**
     * 
     * @type {Array<SuperContestEffectFlavorText>}
     * @memberof SuperContestEffectDetail
     */
    flavorTextEntries: Array<SuperContestEffectFlavorText>;
    /**
     * 
     * @type {Array<MoveSummary>}
     * @memberof SuperContestEffectDetail
     */
    moves: Array<MoveSummary>;
}

/**
 * Check if a given object implements the SuperContestEffectDetail interface.
 */
export function instanceOfSuperContestEffectDetail(value: object): value is SuperContestEffectDetail {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('appeal' in value) || value['appeal'] === undefined) return false;
    if (!('flavorTextEntries' in value) || value['flavorTextEntries'] === undefined) return false;
    if (!('moves' in value) || value['moves'] === undefined) return false;
    return true;
}

export function SuperContestEffectDetailFromJSON(json: any): SuperContestEffectDetail {
    return SuperContestEffectDetailFromJSONTyped(json, false);
}

export function SuperContestEffectDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): SuperContestEffectDetail {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'appeal': json['appeal'],
        'flavorTextEntries': ((json['flavor_text_entries'] as Array<any>).map(SuperContestEffectFlavorTextFromJSON)),
        'moves': ((json['moves'] as Array<any>).map(MoveSummaryFromJSON)),
    };
}

export function SuperContestEffectDetailToJSON(json: any): SuperContestEffectDetail {
    return SuperContestEffectDetailToJSONTyped(json, false);
}

export function SuperContestEffectDetailToJSONTyped(value?: Omit<SuperContestEffectDetail, 'id'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'appeal': value['appeal'],
        'flavor_text_entries': ((value['flavorTextEntries'] as Array<any>).map(SuperContestEffectFlavorTextToJSON)),
        'moves': ((value['moves'] as Array<any>).map(MoveSummaryToJSON)),
    };
}

