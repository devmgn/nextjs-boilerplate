/* tslint:disable */
/* eslint-disable */
/**
 * PokéAPI
 * All the Pokémon data you\'ll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We\'ve covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.     
 *
 * The version of the OpenAPI document: 2.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MoveName } from './MoveName';
import {
    MoveNameFromJSON,
    MoveNameFromJSONTyped,
    MoveNameToJSON,
    MoveNameToJSONTyped,
} from './MoveName';
import type { MoveDetailEffectChangesInner } from './MoveDetailEffectChangesInner';
import {
    MoveDetailEffectChangesInnerFromJSON,
    MoveDetailEffectChangesInnerFromJSONTyped,
    MoveDetailEffectChangesInnerToJSON,
    MoveDetailEffectChangesInnerToJSONTyped,
} from './MoveDetailEffectChangesInner';
import type { MoveFlavorText } from './MoveFlavorText';
import {
    MoveFlavorTextFromJSON,
    MoveFlavorTextFromJSONTyped,
    MoveFlavorTextToJSON,
    MoveFlavorTextToJSONTyped,
} from './MoveFlavorText';
import type { GenerationSummary } from './GenerationSummary';
import {
    GenerationSummaryFromJSON,
    GenerationSummaryFromJSONTyped,
    GenerationSummaryToJSON,
    GenerationSummaryToJSONTyped,
} from './GenerationSummary';
import type { ContestTypeSummary } from './ContestTypeSummary';
import {
    ContestTypeSummaryFromJSON,
    ContestTypeSummaryFromJSONTyped,
    ContestTypeSummaryToJSON,
    ContestTypeSummaryToJSONTyped,
} from './ContestTypeSummary';
import type { MoveDetailStatChangesInner } from './MoveDetailStatChangesInner';
import {
    MoveDetailStatChangesInnerFromJSON,
    MoveDetailStatChangesInnerFromJSONTyped,
    MoveDetailStatChangesInnerToJSON,
    MoveDetailStatChangesInnerToJSONTyped,
} from './MoveDetailStatChangesInner';
import type { MoveMeta } from './MoveMeta';
import {
    MoveMetaFromJSON,
    MoveMetaFromJSONTyped,
    MoveMetaToJSON,
    MoveMetaToJSONTyped,
} from './MoveMeta';
import type { TypeSummary } from './TypeSummary';
import {
    TypeSummaryFromJSON,
    TypeSummaryFromJSONTyped,
    TypeSummaryToJSON,
    TypeSummaryToJSONTyped,
} from './TypeSummary';
import type { MoveDetailContestCombos } from './MoveDetailContestCombos';
import {
    MoveDetailContestCombosFromJSON,
    MoveDetailContestCombosFromJSONTyped,
    MoveDetailContestCombosToJSON,
    MoveDetailContestCombosToJSONTyped,
} from './MoveDetailContestCombos';
import type { ContestEffectSummary } from './ContestEffectSummary';
import {
    ContestEffectSummaryFromJSON,
    ContestEffectSummaryFromJSONTyped,
    ContestEffectSummaryToJSON,
    ContestEffectSummaryToJSONTyped,
} from './ContestEffectSummary';
import type { MoveChangeEffectEntriesInner } from './MoveChangeEffectEntriesInner';
import {
    MoveChangeEffectEntriesInnerFromJSON,
    MoveChangeEffectEntriesInnerFromJSONTyped,
    MoveChangeEffectEntriesInnerToJSON,
    MoveChangeEffectEntriesInnerToJSONTyped,
} from './MoveChangeEffectEntriesInner';
import type { MoveDetailMachinesInner } from './MoveDetailMachinesInner';
import {
    MoveDetailMachinesInnerFromJSON,
    MoveDetailMachinesInnerFromJSONTyped,
    MoveDetailMachinesInnerToJSON,
    MoveDetailMachinesInnerToJSONTyped,
} from './MoveDetailMachinesInner';
import type { MoveDamageClassSummary } from './MoveDamageClassSummary';
import {
    MoveDamageClassSummaryFromJSON,
    MoveDamageClassSummaryFromJSONTyped,
    MoveDamageClassSummaryToJSON,
    MoveDamageClassSummaryToJSONTyped,
} from './MoveDamageClassSummary';
import type { MoveTargetSummary } from './MoveTargetSummary';
import {
    MoveTargetSummaryFromJSON,
    MoveTargetSummaryFromJSONTyped,
    MoveTargetSummaryToJSON,
    MoveTargetSummaryToJSONTyped,
} from './MoveTargetSummary';
import type { AbilityDetailPokemonInnerPokemon } from './AbilityDetailPokemonInnerPokemon';
import {
    AbilityDetailPokemonInnerPokemonFromJSON,
    AbilityDetailPokemonInnerPokemonFromJSONTyped,
    AbilityDetailPokemonInnerPokemonToJSON,
    AbilityDetailPokemonInnerPokemonToJSONTyped,
} from './AbilityDetailPokemonInnerPokemon';
import type { MoveChange } from './MoveChange';
import {
    MoveChangeFromJSON,
    MoveChangeFromJSONTyped,
    MoveChangeToJSON,
    MoveChangeToJSONTyped,
} from './MoveChange';
import type { SuperContestEffectSummary } from './SuperContestEffectSummary';
import {
    SuperContestEffectSummaryFromJSON,
    SuperContestEffectSummaryFromJSONTyped,
    SuperContestEffectSummaryToJSON,
    SuperContestEffectSummaryToJSONTyped,
} from './SuperContestEffectSummary';

/**
 * 
 * @export
 * @interface MoveDetail
 */
export interface MoveDetail {
    /**
     * 
     * @type {number}
     * @memberof MoveDetail
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof MoveDetail
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof MoveDetail
     */
    accuracy?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveDetail
     */
    effectChance: number;
    /**
     * 
     * @type {number}
     * @memberof MoveDetail
     */
    pp?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveDetail
     */
    priority?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MoveDetail
     */
    power?: number | null;
    /**
     * 
     * @type {MoveDetailContestCombos}
     * @memberof MoveDetail
     */
    contestCombos: MoveDetailContestCombos;
    /**
     * 
     * @type {ContestTypeSummary}
     * @memberof MoveDetail
     */
    contestType: ContestTypeSummary;
    /**
     * 
     * @type {ContestEffectSummary}
     * @memberof MoveDetail
     */
    contestEffect: ContestEffectSummary;
    /**
     * 
     * @type {MoveDamageClassSummary}
     * @memberof MoveDetail
     */
    damageClass: MoveDamageClassSummary;
    /**
     * 
     * @type {Array<MoveChangeEffectEntriesInner>}
     * @memberof MoveDetail
     */
    effectEntries: Array<MoveChangeEffectEntriesInner>;
    /**
     * 
     * @type {Array<MoveDetailEffectChangesInner>}
     * @memberof MoveDetail
     */
    effectChanges: Array<MoveDetailEffectChangesInner>;
    /**
     * 
     * @type {GenerationSummary}
     * @memberof MoveDetail
     */
    generation: GenerationSummary;
    /**
     * 
     * @type {MoveMeta}
     * @memberof MoveDetail
     */
    readonly meta: MoveMeta;
    /**
     * 
     * @type {Array<MoveName>}
     * @memberof MoveDetail
     */
    names: Array<MoveName>;
    /**
     * 
     * @type {Array<MoveChange>}
     * @memberof MoveDetail
     */
    pastValues: Array<MoveChange>;
    /**
     * 
     * @type {Array<MoveDetailStatChangesInner>}
     * @memberof MoveDetail
     */
    statChanges: Array<MoveDetailStatChangesInner>;
    /**
     * 
     * @type {SuperContestEffectSummary}
     * @memberof MoveDetail
     */
    superContestEffect: SuperContestEffectSummary;
    /**
     * 
     * @type {MoveTargetSummary}
     * @memberof MoveDetail
     */
    target: MoveTargetSummary;
    /**
     * 
     * @type {TypeSummary}
     * @memberof MoveDetail
     */
    type: TypeSummary;
    /**
     * 
     * @type {Array<MoveDetailMachinesInner>}
     * @memberof MoveDetail
     */
    machines: Array<MoveDetailMachinesInner>;
    /**
     * 
     * @type {Array<MoveFlavorText>}
     * @memberof MoveDetail
     */
    flavorTextEntries: Array<MoveFlavorText>;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof MoveDetail
     */
    learnedByPokemon: Array<AbilityDetailPokemonInnerPokemon>;
}

/**
 * Check if a given object implements the MoveDetail interface.
 */
export function instanceOfMoveDetail(value: object): value is MoveDetail {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('effectChance' in value) || value['effectChance'] === undefined) return false;
    if (!('contestCombos' in value) || value['contestCombos'] === undefined) return false;
    if (!('contestType' in value) || value['contestType'] === undefined) return false;
    if (!('contestEffect' in value) || value['contestEffect'] === undefined) return false;
    if (!('damageClass' in value) || value['damageClass'] === undefined) return false;
    if (!('effectEntries' in value) || value['effectEntries'] === undefined) return false;
    if (!('effectChanges' in value) || value['effectChanges'] === undefined) return false;
    if (!('generation' in value) || value['generation'] === undefined) return false;
    if (!('meta' in value) || value['meta'] === undefined) return false;
    if (!('names' in value) || value['names'] === undefined) return false;
    if (!('pastValues' in value) || value['pastValues'] === undefined) return false;
    if (!('statChanges' in value) || value['statChanges'] === undefined) return false;
    if (!('superContestEffect' in value) || value['superContestEffect'] === undefined) return false;
    if (!('target' in value) || value['target'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('machines' in value) || value['machines'] === undefined) return false;
    if (!('flavorTextEntries' in value) || value['flavorTextEntries'] === undefined) return false;
    if (!('learnedByPokemon' in value) || value['learnedByPokemon'] === undefined) return false;
    return true;
}

export function MoveDetailFromJSON(json: any): MoveDetail {
    return MoveDetailFromJSONTyped(json, false);
}

export function MoveDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): MoveDetail {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'accuracy': json['accuracy'] == null ? undefined : json['accuracy'],
        'effectChance': json['effect_chance'],
        'pp': json['pp'] == null ? undefined : json['pp'],
        'priority': json['priority'] == null ? undefined : json['priority'],
        'power': json['power'] == null ? undefined : json['power'],
        'contestCombos': MoveDetailContestCombosFromJSON(json['contest_combos']),
        'contestType': ContestTypeSummaryFromJSON(json['contest_type']),
        'contestEffect': ContestEffectSummaryFromJSON(json['contest_effect']),
        'damageClass': MoveDamageClassSummaryFromJSON(json['damage_class']),
        'effectEntries': ((json['effect_entries'] as Array<any>).map(MoveChangeEffectEntriesInnerFromJSON)),
        'effectChanges': ((json['effect_changes'] as Array<any>).map(MoveDetailEffectChangesInnerFromJSON)),
        'generation': GenerationSummaryFromJSON(json['generation']),
        'meta': MoveMetaFromJSON(json['meta']),
        'names': ((json['names'] as Array<any>).map(MoveNameFromJSON)),
        'pastValues': ((json['past_values'] as Array<any>).map(MoveChangeFromJSON)),
        'statChanges': ((json['stat_changes'] as Array<any>).map(MoveDetailStatChangesInnerFromJSON)),
        'superContestEffect': SuperContestEffectSummaryFromJSON(json['super_contest_effect']),
        'target': MoveTargetSummaryFromJSON(json['target']),
        'type': TypeSummaryFromJSON(json['type']),
        'machines': ((json['machines'] as Array<any>).map(MoveDetailMachinesInnerFromJSON)),
        'flavorTextEntries': ((json['flavor_text_entries'] as Array<any>).map(MoveFlavorTextFromJSON)),
        'learnedByPokemon': ((json['learned_by_pokemon'] as Array<any>).map(AbilityDetailPokemonInnerPokemonFromJSON)),
    };
}

export function MoveDetailToJSON(json: any): MoveDetail {
    return MoveDetailToJSONTyped(json, false);
}

export function MoveDetailToJSONTyped(value?: Omit<MoveDetail, 'id'|'meta'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'accuracy': value['accuracy'],
        'effect_chance': value['effectChance'],
        'pp': value['pp'],
        'priority': value['priority'],
        'power': value['power'],
        'contest_combos': MoveDetailContestCombosToJSON(value['contestCombos']),
        'contest_type': ContestTypeSummaryToJSON(value['contestType']),
        'contest_effect': ContestEffectSummaryToJSON(value['contestEffect']),
        'damage_class': MoveDamageClassSummaryToJSON(value['damageClass']),
        'effect_entries': ((value['effectEntries'] as Array<any>).map(MoveChangeEffectEntriesInnerToJSON)),
        'effect_changes': ((value['effectChanges'] as Array<any>).map(MoveDetailEffectChangesInnerToJSON)),
        'generation': GenerationSummaryToJSON(value['generation']),
        'names': ((value['names'] as Array<any>).map(MoveNameToJSON)),
        'past_values': ((value['pastValues'] as Array<any>).map(MoveChangeToJSON)),
        'stat_changes': ((value['statChanges'] as Array<any>).map(MoveDetailStatChangesInnerToJSON)),
        'super_contest_effect': SuperContestEffectSummaryToJSON(value['superContestEffect']),
        'target': MoveTargetSummaryToJSON(value['target']),
        'type': TypeSummaryToJSON(value['type']),
        'machines': ((value['machines'] as Array<any>).map(MoveDetailMachinesInnerToJSON)),
        'flavor_text_entries': ((value['flavorTextEntries'] as Array<any>).map(MoveFlavorTextToJSON)),
        'learned_by_pokemon': ((value['learnedByPokemon'] as Array<any>).map(AbilityDetailPokemonInnerPokemonToJSON)),
    };
}

