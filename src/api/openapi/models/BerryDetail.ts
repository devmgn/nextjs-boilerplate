/* tslint:disable */
/* eslint-disable */
/**
 * PokéAPI
 * All the Pokémon data you\'ll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We\'ve covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.     
 *
 * The version of the OpenAPI document: 2.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BerryDetailFlavorsInner } from './BerryDetailFlavorsInner';
import {
    BerryDetailFlavorsInnerFromJSON,
    BerryDetailFlavorsInnerFromJSONTyped,
    BerryDetailFlavorsInnerToJSON,
    BerryDetailFlavorsInnerToJSONTyped,
} from './BerryDetailFlavorsInner';
import type { TypeSummary } from './TypeSummary';
import {
    TypeSummaryFromJSON,
    TypeSummaryFromJSONTyped,
    TypeSummaryToJSON,
    TypeSummaryToJSONTyped,
} from './TypeSummary';
import type { BerryFirmnessSummary } from './BerryFirmnessSummary';
import {
    BerryFirmnessSummaryFromJSON,
    BerryFirmnessSummaryFromJSONTyped,
    BerryFirmnessSummaryToJSON,
    BerryFirmnessSummaryToJSONTyped,
} from './BerryFirmnessSummary';
import type { ItemSummary } from './ItemSummary';
import {
    ItemSummaryFromJSON,
    ItemSummaryFromJSONTyped,
    ItemSummaryToJSON,
    ItemSummaryToJSONTyped,
} from './ItemSummary';

/**
 * 
 * @export
 * @interface BerryDetail
 */
export interface BerryDetail {
    /**
     * 
     * @type {number}
     * @memberof BerryDetail
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof BerryDetail
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof BerryDetail
     */
    growthTime: number;
    /**
     * 
     * @type {number}
     * @memberof BerryDetail
     */
    maxHarvest: number;
    /**
     * 
     * @type {number}
     * @memberof BerryDetail
     */
    naturalGiftPower: number;
    /**
     * 
     * @type {number}
     * @memberof BerryDetail
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof BerryDetail
     */
    smoothness: number;
    /**
     * 
     * @type {number}
     * @memberof BerryDetail
     */
    soilDryness: number;
    /**
     * 
     * @type {BerryFirmnessSummary}
     * @memberof BerryDetail
     */
    firmness: BerryFirmnessSummary;
    /**
     * 
     * @type {Array<BerryDetailFlavorsInner>}
     * @memberof BerryDetail
     */
    flavors: Array<BerryDetailFlavorsInner>;
    /**
     * 
     * @type {ItemSummary}
     * @memberof BerryDetail
     */
    item: ItemSummary;
    /**
     * 
     * @type {TypeSummary}
     * @memberof BerryDetail
     */
    naturalGiftType: TypeSummary;
}

/**
 * Check if a given object implements the BerryDetail interface.
 */
export function instanceOfBerryDetail(value: object): value is BerryDetail {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('growthTime' in value) || value['growthTime'] === undefined) return false;
    if (!('maxHarvest' in value) || value['maxHarvest'] === undefined) return false;
    if (!('naturalGiftPower' in value) || value['naturalGiftPower'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('smoothness' in value) || value['smoothness'] === undefined) return false;
    if (!('soilDryness' in value) || value['soilDryness'] === undefined) return false;
    if (!('firmness' in value) || value['firmness'] === undefined) return false;
    if (!('flavors' in value) || value['flavors'] === undefined) return false;
    if (!('item' in value) || value['item'] === undefined) return false;
    if (!('naturalGiftType' in value) || value['naturalGiftType'] === undefined) return false;
    return true;
}

export function BerryDetailFromJSON(json: any): BerryDetail {
    return BerryDetailFromJSONTyped(json, false);
}

export function BerryDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): BerryDetail {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'growthTime': json['growth_time'],
        'maxHarvest': json['max_harvest'],
        'naturalGiftPower': json['natural_gift_power'],
        'size': json['size'],
        'smoothness': json['smoothness'],
        'soilDryness': json['soil_dryness'],
        'firmness': BerryFirmnessSummaryFromJSON(json['firmness']),
        'flavors': ((json['flavors'] as Array<any>).map(BerryDetailFlavorsInnerFromJSON)),
        'item': ItemSummaryFromJSON(json['item']),
        'naturalGiftType': TypeSummaryFromJSON(json['natural_gift_type']),
    };
}

export function BerryDetailToJSON(json: any): BerryDetail {
    return BerryDetailToJSONTyped(json, false);
}

export function BerryDetailToJSONTyped(value?: Omit<BerryDetail, 'id'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'growth_time': value['growthTime'],
        'max_harvest': value['maxHarvest'],
        'natural_gift_power': value['naturalGiftPower'],
        'size': value['size'],
        'smoothness': value['smoothness'],
        'soil_dryness': value['soilDryness'],
        'firmness': BerryFirmnessSummaryToJSON(value['firmness']),
        'flavors': ((value['flavors'] as Array<any>).map(BerryDetailFlavorsInnerToJSON)),
        'item': ItemSummaryToJSON(value['item']),
        'natural_gift_type': TypeSummaryToJSON(value['naturalGiftType']),
    };
}

