/* tslint:disable */
/* eslint-disable */
/**
 * PokéAPI
 * All the Pokémon data you\'ll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We\'ve covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.     
 *
 * The version of the OpenAPI document: 2.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VersionGroupSummary } from './VersionGroupSummary';
import {
    VersionGroupSummaryFromJSON,
    VersionGroupSummaryFromJSONTyped,
    VersionGroupSummaryToJSON,
    VersionGroupSummaryToJSONTyped,
} from './VersionGroupSummary';
import type { MoveSummary } from './MoveSummary';
import {
    MoveSummaryFromJSON,
    MoveSummaryFromJSONTyped,
    MoveSummaryToJSON,
    MoveSummaryToJSONTyped,
} from './MoveSummary';
import type { GenerationName } from './GenerationName';
import {
    GenerationNameFromJSON,
    GenerationNameFromJSONTyped,
    GenerationNameToJSON,
    GenerationNameToJSONTyped,
} from './GenerationName';
import type { TypeSummary } from './TypeSummary';
import {
    TypeSummaryFromJSON,
    TypeSummaryFromJSONTyped,
    TypeSummaryToJSON,
    TypeSummaryToJSONTyped,
} from './TypeSummary';
import type { AbilitySummary } from './AbilitySummary';
import {
    AbilitySummaryFromJSON,
    AbilitySummaryFromJSONTyped,
    AbilitySummaryToJSON,
    AbilitySummaryToJSONTyped,
} from './AbilitySummary';
import type { RegionSummary } from './RegionSummary';
import {
    RegionSummaryFromJSON,
    RegionSummaryFromJSONTyped,
    RegionSummaryToJSON,
    RegionSummaryToJSONTyped,
} from './RegionSummary';
import type { PokemonSpeciesSummary } from './PokemonSpeciesSummary';
import {
    PokemonSpeciesSummaryFromJSON,
    PokemonSpeciesSummaryFromJSONTyped,
    PokemonSpeciesSummaryToJSON,
    PokemonSpeciesSummaryToJSONTyped,
} from './PokemonSpeciesSummary';

/**
 * 
 * @export
 * @interface GenerationDetail
 */
export interface GenerationDetail {
    /**
     * 
     * @type {number}
     * @memberof GenerationDetail
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof GenerationDetail
     */
    name: string;
    /**
     * 
     * @type {Array<AbilitySummary>}
     * @memberof GenerationDetail
     */
    abilities: Array<AbilitySummary>;
    /**
     * 
     * @type {RegionSummary}
     * @memberof GenerationDetail
     */
    mainRegion: RegionSummary;
    /**
     * 
     * @type {Array<MoveSummary>}
     * @memberof GenerationDetail
     */
    moves: Array<MoveSummary>;
    /**
     * 
     * @type {Array<GenerationName>}
     * @memberof GenerationDetail
     */
    names: Array<GenerationName>;
    /**
     * 
     * @type {Array<PokemonSpeciesSummary>}
     * @memberof GenerationDetail
     */
    pokemonSpecies: Array<PokemonSpeciesSummary>;
    /**
     * 
     * @type {Array<TypeSummary>}
     * @memberof GenerationDetail
     */
    types: Array<TypeSummary>;
    /**
     * 
     * @type {Array<VersionGroupSummary>}
     * @memberof GenerationDetail
     */
    versionGroups: Array<VersionGroupSummary>;
}

/**
 * Check if a given object implements the GenerationDetail interface.
 */
export function instanceOfGenerationDetail(value: object): value is GenerationDetail {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('abilities' in value) || value['abilities'] === undefined) return false;
    if (!('mainRegion' in value) || value['mainRegion'] === undefined) return false;
    if (!('moves' in value) || value['moves'] === undefined) return false;
    if (!('names' in value) || value['names'] === undefined) return false;
    if (!('pokemonSpecies' in value) || value['pokemonSpecies'] === undefined) return false;
    if (!('types' in value) || value['types'] === undefined) return false;
    if (!('versionGroups' in value) || value['versionGroups'] === undefined) return false;
    return true;
}

export function GenerationDetailFromJSON(json: any): GenerationDetail {
    return GenerationDetailFromJSONTyped(json, false);
}

export function GenerationDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): GenerationDetail {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'abilities': ((json['abilities'] as Array<any>).map(AbilitySummaryFromJSON)),
        'mainRegion': RegionSummaryFromJSON(json['main_region']),
        'moves': ((json['moves'] as Array<any>).map(MoveSummaryFromJSON)),
        'names': ((json['names'] as Array<any>).map(GenerationNameFromJSON)),
        'pokemonSpecies': ((json['pokemon_species'] as Array<any>).map(PokemonSpeciesSummaryFromJSON)),
        'types': ((json['types'] as Array<any>).map(TypeSummaryFromJSON)),
        'versionGroups': ((json['version_groups'] as Array<any>).map(VersionGroupSummaryFromJSON)),
    };
}

export function GenerationDetailToJSON(json: any): GenerationDetail {
    return GenerationDetailToJSONTyped(json, false);
}

export function GenerationDetailToJSONTyped(value?: Omit<GenerationDetail, 'id'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'abilities': ((value['abilities'] as Array<any>).map(AbilitySummaryToJSON)),
        'main_region': RegionSummaryToJSON(value['mainRegion']),
        'moves': ((value['moves'] as Array<any>).map(MoveSummaryToJSON)),
        'names': ((value['names'] as Array<any>).map(GenerationNameToJSON)),
        'pokemon_species': ((value['pokemonSpecies'] as Array<any>).map(PokemonSpeciesSummaryToJSON)),
        'types': ((value['types'] as Array<any>).map(TypeSummaryToJSON)),
        'version_groups': ((value['versionGroups'] as Array<any>).map(VersionGroupSummaryToJSON)),
    };
}

