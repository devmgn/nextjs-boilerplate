/* tslint:disable */
/* eslint-disable */
/**
 * PokéAPI
 * All the Pokémon data you\'ll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We\'ve covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.     
 *
 * The version of the OpenAPI document: 2.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ItemDetailSprites } from './ItemDetailSprites';
import {
    ItemDetailSpritesFromJSON,
    ItemDetailSpritesFromJSONTyped,
    ItemDetailSpritesToJSON,
    ItemDetailSpritesToJSONTyped,
} from './ItemDetailSprites';
import type { ItemFlingEffectSummary } from './ItemFlingEffectSummary';
import {
    ItemFlingEffectSummaryFromJSON,
    ItemFlingEffectSummaryFromJSONTyped,
    ItemFlingEffectSummaryToJSON,
    ItemFlingEffectSummaryToJSONTyped,
} from './ItemFlingEffectSummary';
import type { ItemName } from './ItemName';
import {
    ItemNameFromJSON,
    ItemNameFromJSONTyped,
    ItemNameToJSON,
    ItemNameToJSONTyped,
} from './ItemName';
import type { AbilityDetailPokemonInnerPokemon } from './AbilityDetailPokemonInnerPokemon';
import {
    AbilityDetailPokemonInnerPokemonFromJSON,
    AbilityDetailPokemonInnerPokemonFromJSONTyped,
    AbilityDetailPokemonInnerPokemonToJSON,
    AbilityDetailPokemonInnerPokemonToJSONTyped,
} from './AbilityDetailPokemonInnerPokemon';
import type { ItemCategorySummary } from './ItemCategorySummary';
import {
    ItemCategorySummaryFromJSON,
    ItemCategorySummaryFromJSONTyped,
    ItemCategorySummaryToJSON,
    ItemCategorySummaryToJSONTyped,
} from './ItemCategorySummary';
import type { ItemDetailHeldByPokemonInner } from './ItemDetailHeldByPokemonInner';
import {
    ItemDetailHeldByPokemonInnerFromJSON,
    ItemDetailHeldByPokemonInnerFromJSONTyped,
    ItemDetailHeldByPokemonInnerToJSON,
    ItemDetailHeldByPokemonInnerToJSONTyped,
} from './ItemDetailHeldByPokemonInner';
import type { ItemEffectText } from './ItemEffectText';
import {
    ItemEffectTextFromJSON,
    ItemEffectTextFromJSONTyped,
    ItemEffectTextToJSON,
    ItemEffectTextToJSONTyped,
} from './ItemEffectText';
import type { ItemGameIndex } from './ItemGameIndex';
import {
    ItemGameIndexFromJSON,
    ItemGameIndexFromJSONTyped,
    ItemGameIndexToJSON,
    ItemGameIndexToJSONTyped,
} from './ItemGameIndex';
import type { ItemFlavorText } from './ItemFlavorText';
import {
    ItemFlavorTextFromJSON,
    ItemFlavorTextFromJSONTyped,
    ItemFlavorTextToJSON,
    ItemFlavorTextToJSONTyped,
} from './ItemFlavorText';
import type { ItemDetailBabyTriggerFor } from './ItemDetailBabyTriggerFor';
import {
    ItemDetailBabyTriggerForFromJSON,
    ItemDetailBabyTriggerForFromJSONTyped,
    ItemDetailBabyTriggerForToJSON,
    ItemDetailBabyTriggerForToJSONTyped,
} from './ItemDetailBabyTriggerFor';
import type { ItemDetailMachinesInner } from './ItemDetailMachinesInner';
import {
    ItemDetailMachinesInnerFromJSON,
    ItemDetailMachinesInnerFromJSONTyped,
    ItemDetailMachinesInnerToJSON,
    ItemDetailMachinesInnerToJSONTyped,
} from './ItemDetailMachinesInner';

/**
 * 
 * @export
 * @interface ItemDetail
 */
export interface ItemDetail {
    /**
     * 
     * @type {number}
     * @memberof ItemDetail
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof ItemDetail
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof ItemDetail
     */
    cost?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ItemDetail
     */
    flingPower?: number | null;
    /**
     * 
     * @type {ItemFlingEffectSummary}
     * @memberof ItemDetail
     */
    flingEffect: ItemFlingEffectSummary;
    /**
     * 
     * @type {Array<AbilityDetailPokemonInnerPokemon>}
     * @memberof ItemDetail
     */
    attributes: Array<AbilityDetailPokemonInnerPokemon>;
    /**
     * 
     * @type {ItemCategorySummary}
     * @memberof ItemDetail
     */
    category: ItemCategorySummary;
    /**
     * 
     * @type {Array<ItemEffectText>}
     * @memberof ItemDetail
     */
    effectEntries: Array<ItemEffectText>;
    /**
     * 
     * @type {Array<ItemFlavorText>}
     * @memberof ItemDetail
     */
    flavorTextEntries: Array<ItemFlavorText>;
    /**
     * 
     * @type {Array<ItemGameIndex>}
     * @memberof ItemDetail
     */
    gameIndices: Array<ItemGameIndex>;
    /**
     * 
     * @type {Array<ItemName>}
     * @memberof ItemDetail
     */
    names: Array<ItemName>;
    /**
     * 
     * @type {Array<ItemDetailHeldByPokemonInner>}
     * @memberof ItemDetail
     */
    heldByPokemon: Array<ItemDetailHeldByPokemonInner>;
    /**
     * 
     * @type {ItemDetailSprites}
     * @memberof ItemDetail
     */
    sprites: ItemDetailSprites;
    /**
     * 
     * @type {ItemDetailBabyTriggerFor}
     * @memberof ItemDetail
     */
    babyTriggerFor: ItemDetailBabyTriggerFor;
    /**
     * 
     * @type {Array<ItemDetailMachinesInner>}
     * @memberof ItemDetail
     */
    machines: Array<ItemDetailMachinesInner>;
}

/**
 * Check if a given object implements the ItemDetail interface.
 */
export function instanceOfItemDetail(value: object): value is ItemDetail {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('flingEffect' in value) || value['flingEffect'] === undefined) return false;
    if (!('attributes' in value) || value['attributes'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('effectEntries' in value) || value['effectEntries'] === undefined) return false;
    if (!('flavorTextEntries' in value) || value['flavorTextEntries'] === undefined) return false;
    if (!('gameIndices' in value) || value['gameIndices'] === undefined) return false;
    if (!('names' in value) || value['names'] === undefined) return false;
    if (!('heldByPokemon' in value) || value['heldByPokemon'] === undefined) return false;
    if (!('sprites' in value) || value['sprites'] === undefined) return false;
    if (!('babyTriggerFor' in value) || value['babyTriggerFor'] === undefined) return false;
    if (!('machines' in value) || value['machines'] === undefined) return false;
    return true;
}

export function ItemDetailFromJSON(json: any): ItemDetail {
    return ItemDetailFromJSONTyped(json, false);
}

export function ItemDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemDetail {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'cost': json['cost'] == null ? undefined : json['cost'],
        'flingPower': json['fling_power'] == null ? undefined : json['fling_power'],
        'flingEffect': ItemFlingEffectSummaryFromJSON(json['fling_effect']),
        'attributes': ((json['attributes'] as Array<any>).map(AbilityDetailPokemonInnerPokemonFromJSON)),
        'category': ItemCategorySummaryFromJSON(json['category']),
        'effectEntries': ((json['effect_entries'] as Array<any>).map(ItemEffectTextFromJSON)),
        'flavorTextEntries': ((json['flavor_text_entries'] as Array<any>).map(ItemFlavorTextFromJSON)),
        'gameIndices': ((json['game_indices'] as Array<any>).map(ItemGameIndexFromJSON)),
        'names': ((json['names'] as Array<any>).map(ItemNameFromJSON)),
        'heldByPokemon': ((json['held_by_pokemon'] as Array<any>).map(ItemDetailHeldByPokemonInnerFromJSON)),
        'sprites': ItemDetailSpritesFromJSON(json['sprites']),
        'babyTriggerFor': ItemDetailBabyTriggerForFromJSON(json['baby_trigger_for']),
        'machines': ((json['machines'] as Array<any>).map(ItemDetailMachinesInnerFromJSON)),
    };
}

export function ItemDetailToJSON(json: any): ItemDetail {
    return ItemDetailToJSONTyped(json, false);
}

export function ItemDetailToJSONTyped(value?: Omit<ItemDetail, 'id'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'cost': value['cost'],
        'fling_power': value['flingPower'],
        'fling_effect': ItemFlingEffectSummaryToJSON(value['flingEffect']),
        'attributes': ((value['attributes'] as Array<any>).map(AbilityDetailPokemonInnerPokemonToJSON)),
        'category': ItemCategorySummaryToJSON(value['category']),
        'effect_entries': ((value['effectEntries'] as Array<any>).map(ItemEffectTextToJSON)),
        'flavor_text_entries': ((value['flavorTextEntries'] as Array<any>).map(ItemFlavorTextToJSON)),
        'game_indices': ((value['gameIndices'] as Array<any>).map(ItemGameIndexToJSON)),
        'names': ((value['names'] as Array<any>).map(ItemNameToJSON)),
        'held_by_pokemon': ((value['heldByPokemon'] as Array<any>).map(ItemDetailHeldByPokemonInnerToJSON)),
        'sprites': ItemDetailSpritesToJSON(value['sprites']),
        'baby_trigger_for': ItemDetailBabyTriggerForToJSON(value['babyTriggerFor']),
        'machines': ((value['machines'] as Array<any>).map(ItemDetailMachinesInnerToJSON)),
    };
}

