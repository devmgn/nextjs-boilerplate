/* tslint:disable */
/* eslint-disable */
/**
 * PokéAPI
 * All the Pokémon data you\'ll ever need in one place, easily accessible through a modern free open-source RESTful API.  ## What is this?  This is a full RESTful API linked to an extensive database detailing everything about the Pokémon main game series.  We\'ve covered everything from Pokémon to Berry Flavors.  ## Where do I start?  We have awesome [documentation](https://pokeapi.co/docs/v2) on how to use this API. It takes minutes to get started.  This API will always be publicly available and will never require any extensive setup process to consume.  Created by [**Paul Hallett**(]https://github.com/phalt) and other [**PokéAPI contributors***](https://github.com/PokeAPI/pokeapi#contributing) around the world. Pokémon and Pokémon character names are trademarks of Nintendo.     
 *
 * The version of the OpenAPI document: 2.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BerryFlavorDetailBerriesInner } from './BerryFlavorDetailBerriesInner';
import {
    BerryFlavorDetailBerriesInnerFromJSON,
    BerryFlavorDetailBerriesInnerFromJSONTyped,
    BerryFlavorDetailBerriesInnerToJSON,
    BerryFlavorDetailBerriesInnerToJSONTyped,
} from './BerryFlavorDetailBerriesInner';
import type { BerryFlavorName } from './BerryFlavorName';
import {
    BerryFlavorNameFromJSON,
    BerryFlavorNameFromJSONTyped,
    BerryFlavorNameToJSON,
    BerryFlavorNameToJSONTyped,
} from './BerryFlavorName';
import type { ContestTypeSummary } from './ContestTypeSummary';
import {
    ContestTypeSummaryFromJSON,
    ContestTypeSummaryFromJSONTyped,
    ContestTypeSummaryToJSON,
    ContestTypeSummaryToJSONTyped,
} from './ContestTypeSummary';

/**
 * 
 * @export
 * @interface BerryFlavorDetail
 */
export interface BerryFlavorDetail {
    /**
     * 
     * @type {number}
     * @memberof BerryFlavorDetail
     */
    readonly id: number;
    /**
     * 
     * @type {string}
     * @memberof BerryFlavorDetail
     */
    name: string;
    /**
     * 
     * @type {Array<BerryFlavorDetailBerriesInner>}
     * @memberof BerryFlavorDetail
     */
    berries: Array<BerryFlavorDetailBerriesInner>;
    /**
     * 
     * @type {ContestTypeSummary}
     * @memberof BerryFlavorDetail
     */
    contestType: ContestTypeSummary;
    /**
     * 
     * @type {Array<BerryFlavorName>}
     * @memberof BerryFlavorDetail
     */
    names: Array<BerryFlavorName>;
}

/**
 * Check if a given object implements the BerryFlavorDetail interface.
 */
export function instanceOfBerryFlavorDetail(value: object): value is BerryFlavorDetail {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('berries' in value) || value['berries'] === undefined) return false;
    if (!('contestType' in value) || value['contestType'] === undefined) return false;
    if (!('names' in value) || value['names'] === undefined) return false;
    return true;
}

export function BerryFlavorDetailFromJSON(json: any): BerryFlavorDetail {
    return BerryFlavorDetailFromJSONTyped(json, false);
}

export function BerryFlavorDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): BerryFlavorDetail {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'berries': ((json['berries'] as Array<any>).map(BerryFlavorDetailBerriesInnerFromJSON)),
        'contestType': ContestTypeSummaryFromJSON(json['contest_type']),
        'names': ((json['names'] as Array<any>).map(BerryFlavorNameFromJSON)),
    };
}

export function BerryFlavorDetailToJSON(json: any): BerryFlavorDetail {
    return BerryFlavorDetailToJSONTyped(json, false);
}

export function BerryFlavorDetailToJSONTyped(value?: Omit<BerryFlavorDetail, 'id'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'berries': ((value['berries'] as Array<any>).map(BerryFlavorDetailBerriesInnerToJSON)),
        'contest_type': ContestTypeSummaryToJSON(value['contestType']),
        'names': ((value['names'] as Array<any>).map(BerryFlavorNameToJSON)),
    };
}

